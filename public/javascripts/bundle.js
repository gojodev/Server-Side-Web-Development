(() => {
  // node_modules/nanoid/index.browser.js
  var nanoid = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
    byte &= 63;
    if (byte < 36) {
      id += byte.toString(36);
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase();
    } else if (byte > 62) {
      id += "-";
    } else {
      id += "_";
    }
    return id;
  }, "");

  // public/javascripts/booking.js
  function error_msg(message, element_ids) {
    for (let i = 0; i < element_ids.length; i++) {
      document.getElementById(element_ids[i]).classList.toggle("error_borders");
    }
    document.getElementById("error_section").classList.toggle("hide");
    document.getElementById("error_text").innerHTML = message;
    console.log(message);
  }
  function hide_errors() {
    document.getElementById("error_section").classList.toggle("hide");
  }
  hide_errors();
  function createBooking(data2) {
    console.log(data2);
  }
  var isFirstRun = false;
  var card_number = document.getElementById("card_number");
  var expiry_date = document.getElementById("expiry_date");
  var counter = 1;
  card_number.addEventListener("input", () => card_number.value = formatNumber(card_number.value.replaceAll(" ", "")));
  var formatNumber = (number) => number.split("").reduce((seed, next, index) => {
    if (index !== 0 && index % 4 == 0)
      seed += " ";
    return seed + next;
  }, "");
  expiry_date.addEventListener("input", () => expiry_date.value = slasher(expiry_date.value.replaceAll(" ")));
  var slasher = (number) => number.split("").reduce((seed, next, index) => {
    if (index % 2 == 0 && index !== 0 && !expiry_date.value.includes("/"))
      seed += "/";
    return seed + next;
  }, "");
  function getBookingDetails() {
    isFirstRun = true;
    let name = document.getElementById("name").value;
    let email = document.getElementById("email").value;
    let date = document.getElementById("date").value;
    let cvc = document.getElementById("cvc").value;
    let time = document.getElementById("time").value;
    let skill_level = document.getElementById("skill_level").value;
    let current_date = /* @__PURE__ */ new Date();
    let input_date = new Date(date);
    let input_date_time = input_date.getTime();
    let current_date_time = current_date.getTime();
    let invalid_name = name == "";
    let invalid_date = !(input_date_time >= current_date_time);
    let invalid_email = !(email.includes("@") && email.includes("."));
    let isError = false;
    input_date = input_date.toDateString();
    if (invalid_name) {
      error_msg("Invalid name input", ["name"]);
      isError = true;
    } else if (invalid_email) {
      error_msg("Invalid email input", ["email"]);
      isError = true;
    } else if (invalid_date) {
      error_msg("Invalid date", ["date"]);
      isError = true;
    }
    let data2 = {
      "name": name,
      "email": email,
      "card_number": card_number.value,
      "expiry_date": expiry_date.value,
      "cvc": cvc,
      "time": time,
      "date": input_date,
      "skill_level": skill_level,
      "id": nanoid()
    };
    if (isError == false) {
      createBooking(data2);
    }
    console.log(data2);
  }
  function autoFill(data2) {
    let id_desc = ["name", "email", "card_number", "expiry_date", "cvc", "time", "date", "skill_level"];
    for (let i = 0; i < id_desc.length; i++) {
      let key = id_desc[i];
      let value = data2[key];
      data2[key] = value;
      document.getElementById(key).value = value;
    }
  }
  var data = {
    "name": "Emmanuel Koledoye",
    "email": "example@gmail.com",
    "card_number": "1111 2222 3333 4444",
    "expiry_date": "10/28",
    "cvc": "123",
    "time": "17:00",
    "date": "31/10/2023",
    "skill_level": "Advanced"
  };
  autoFill(data);
  if (isFirstRun) {
    getBookingDetails();
  }
  document.getElementById("submit_button").addEventListener("click", getBookingDetails);
  function autoDate() {
    let today = (/* @__PURE__ */ new Date()).toJSON().slice(0, 10);
    let tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow = tomorrow.toJSON().slice(0, 10);
    document.getElementById("date").value = tomorrow;
  }
  autoDate();
  counter = 0;
  function flashNotice() {
    if (counter == 0) {
      document.getElementById("notice").classList.toggle("flash");
      counter = 1;
    } else {
      document.getElementById("notice").classList.toggle("not-flash");
      counter = 0;
    }
    setTimeout(flashNotice, 700);
  }
  flashNotice();
})();
//# sourceMappingURL=data:application/json;base64,
